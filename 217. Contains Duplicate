Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

Example 1:

Input: nums = [1,2,3,1]
Output: true
Example 2:

Input: nums = [1,2,3,4]
Output: false
Example 3:

Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true
# Approach 1
Iterate over the list, for each value, iterate over the remaining values in the list and compare.

## Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->
O(n^2)

- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->
O(1)

## Code
```
func containsDuplicate(nums []int) bool {
    for i, num := range nums {
        fmt.Println(nums[i])
        for _, num2 := range nums[i + 1:] {
            if num == num2 {
                return true
            }
        }
    }
    return false
}
```

# Approach 2
<!-- Describe your approach to solving the problem. -->
Sort the list, then iterate over it once and compare each value with the value immediately following.

## Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->
O(nlogn)

- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->
O(1)

## Code
```
func containsDuplicate(nums []int) bool {
    sort.Ints(nums)
    fmt.Println(nums)
    for i, num := range nums[:len(nums) - 1] {
        if num == nums[i + 1] {
            return true
        }
    }
    return false
}
```

# Approach 3
Create a map and iterate over the list. If the value exists in the map, return true, otherwise add it and move on to the next value.

## Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->
O(n)

- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->
O(n)

## Code
```
func containsDuplicate(nums []int) bool {
    numsHash := map[int]struct{}{} //struct is 0 bytes
    for _, num := range nums {
        if _, ok := numsHash[num]; ok { //ok is set to true if the key exists
            return true //return true if the value is already in the hash
        } else {
            numsHash[num] = struct{}{}
        }
    }
    return false
}
```
